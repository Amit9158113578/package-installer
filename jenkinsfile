pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node24'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage("Clean Workspace") {
            steps {
                cleanWs()
            }
        }
        stage("Git Checkout") {
            steps {
                git 'https://github.com/Amit9158113578/DevOps-Project-Zomato-Kastro.git'
            }
        }
        stage("SonarQube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=zomato \
                        -Dsonar.projectKey=zomato
                    '''
                }
            }
        }
        stage("Code Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage("Install NPM Dependencies") {
            steps {
                sh "npm install"
            }
        }
        
        stage("Trivy File Scan") {
            steps {
                sh "trivy fs . > trivy.txt"
            }
        }
        stage("Build Docker Image") {
            steps {
                sh '''
                    docker stop zomato || true
                    docker rm zomato || true
                    docker rmi zomato:latest || true
                    docker rmi amit9158/zomato || true
                    docker system prune -af
                    docker build -t zomato .
                '''
            }
        }
        stage("Tag & Push to DockerHub") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker') {
                        sh '''
                            docker tag zomato amit9158/zomato:latest
                            docker push amit9158/zomato:latest
                        '''
                    }
                }
            }
        }
        
        
        stage("Deploy to Container") {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh '''
                        docker run -d --name zomato -p 3000:3000 amit9158/zomato:latest
                    '''
                }
            }
        }
    }
    post {
        success {
            echo "âœ… Pipeline completed successfully."
        }

    }
}
